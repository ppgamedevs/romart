// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
	directUrl = env("DIRECT_URL")
}

enum UserRole {
	ADMIN
	ARTIST
	BUYER
}

enum KycStatus {
	PENDING
	APPROVED
	REJECTED
}

enum KycDocumentType {
	ID_CARD
	PASSPORT
	DRIVER_LICENSE
	OTHER
}

enum ArtworkStatus {
	DRAFT
	PUBLISHED
	SOLD
	ARCHIVED
}

enum ArtworkVisibility {
	PUBLIC
	PRIVATE
}

enum ArtworkKind {
	ORIGINAL
	EDITIONED
	DIGITAL
}

enum ImageKind {
	ARTWORK
	AVATAR
	COVER
	KYC
}

enum EditionType {
	PRINT
	DIGITAL
}

enum PrintMaterial {
	CANVAS
	METAL
}

enum OrderStatus {
	PENDING
	PAID
	FAILED
	REFUNDED
	CANCELLED
}

enum PaymentProvider {
	STRIPE
	PAYPAL
	TEST
}

enum OrderItemKind {
	ORIGINAL
	PRINT
	DIGITAL
}

enum PayoutStatus {
	PENDING
	PAID
	FAILED
	REVERSED
}

enum PayoutProvider {
	STRIPE
	MANUAL
	TEST
}

enum FulfillmentStatus {
	DRAFT
	SUBMITTED
	IN_PRODUCTION
	SHIPPED
	DELIVERED
	CANCELLED
	FAILED
}

enum ModerationStatus {
	PENDING
	APPROVED
	REJECTED
	MATURE
}

enum ContentRating {
	SAFE
	MATURE
	PROHIBITED
}

enum ShipmentStatus {
	READY_TO_SHIP
	LABEL_PURCHASED
	IN_TRANSIT
	DELIVERED
	CANCELLED
}

model User {
	id           String   @id @default(cuid())
	email        String   @unique
	name         String
	role         UserRole @default(BUYER)
	passwordHash String?
	createdAt    DateTime @default(now())
	updatedAt    DateTime @updatedAt

	// Relations
	artist     Artist?
	orders     Order[]
	addresses  Address[]
	auditLogs  AuditLog[]
	accounts   Account[]
	sessions   Session[]
	digitalEntitlements DigitalEntitlement[]

	@@map("users")
}

model Artist {
	id              String   @id @default(cuid())
	userId          String   @unique
	slug            String   @unique
	displayName     String
	avatarUrl       String?
	coverUrl        String?
	locationCity    String?
	locationCountry String?
	bio             String?
	statement       String?
	education       Json?
	exhibitions     Json?
	awards          Json?
	socials         Json?
	onboardingStep  Int      @default(1)
	completionScore Int      @default(0)
	slugLockedAt    DateTime?
	kycStatus       KycStatus @default(PENDING)
	// NEW Stripe Connect fields:
	stripeAccountId      String?   @unique
	payoutsEnabled       Boolean   @default(false)
	connectStatus        String?   // e.g., "onboarding_required" | "complete" | "restricted"
	connectRequirements  Json?
	// Moderation fields
	banned          Boolean @default(false)
	banReason       String?
	shadowbanned    Boolean @default(false)
	trustScore      Int     @default(50)
	createdAt       DateTime @default(now())
	updatedAt       DateTime @updatedAt

	// Relations
	user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
	artworks        Artwork[]
	orderItems      OrderItem[]
	payouts         Payout[]
	kycVerification KycVerification?
	images          Image[]

	@@map("artists")
}

model Artwork {
	id             String            @id @default(cuid())
	artistId       String
	slug           String            @unique
	title          String
	description    String?
	year           Int?
	medium         String?
	widthCm        Decimal?
	heightCm       Decimal?
	depthCm        Decimal?
	framed         Boolean           @default(false)
	category       String?
	status         ArtworkStatus     @default(DRAFT)
	visibility     ArtworkVisibility @default(PRIVATE)
	heroImageUrl   String?
	priceAmount    Int
	priceCurrency  String            @default("EUR")
	kind           ArtworkKind
	publishedAt    DateTime?
	// Moderation fields
	moderationStatus ModerationStatus @default(PENDING)
	contentRating    ContentRating    @default(SAFE)
	flaggedCount     Int              @default(0)
	lastReviewedAt   DateTime?
	suppressed       Boolean          @default(false)
	createdAt      DateTime          @default(now())
	updatedAt      DateTime          @updatedAt

	// Relations
	artist    Artist     @relation(fields: [artistId], references: [id], onDelete: Cascade)
	editions  Edition[]
	images    Image[]
	orderItems OrderItem[]
	cartItems CartItem[]
	hold      ArtworkHold?

	@@index([artistId, status])
	@@index([moderationStatus, suppressed, contentRating])
	@@map("artworks")
}

model Edition {
	id               String       @id @default(cuid())
	artworkId        String
	sku              String       @unique
	runSize          Int?
	available        Int?
	type             EditionType
	unitAmount       Int
	currency         String       @default("EUR")
	downloadableUrl  String?
	// NEW optional fields for prints:
	material         PrintMaterial?
	sizeName         String?       // e.g., "30x40 cm", "50x70 cm"
	widthCm          Decimal?
	heightCm         Decimal?
	// NEW fields for digital delivery:
	privateFileKey   String?       // storage key in private bucket
	fileBytes        Int?          // file size in bytes
	contentType      String?       // MIME type
	checksumSha256   String?       // SHA256 hash for integrity
	createdAt        DateTime     @default(now())
	updatedAt        DateTime     @updatedAt

	// Relations
	artwork    Artwork     @relation(fields: [artworkId], references: [id], onDelete: Cascade)
	orderItems OrderItem[]
	cartItems  CartItem[]
	entitlements DigitalEntitlement[]

	@@map("editions")
}

model Image {
	id           String    @id @default(cuid())
	artworkId    String?
	artistId     String?
	kind         ImageKind @default(ARTWORK)
	url          String
	width        Int?
	height       Int?
	position     Int       @default(0)
	alt          String?
	storageKey   String?
	contentType  String?
	sizeBytes    Int?
	variantMeta  Json?
	isPrintMaster Boolean  @default(false)
	createdAt    DateTime  @default(now())

	// Relations
	artwork Artwork? @relation(fields: [artworkId], references: [id], onDelete: Cascade)
	artist  Artist?  @relation(fields: [artistId], references: [id], onDelete: Cascade)

	@@index([artworkId, createdAt])
	@@index([artistId, kind])
	@@map("images")
}

model Order {
	id                 String          @id @default(cuid())
	buyerId            String
	status             OrderStatus     @default(PENDING)
	platformFeeBps     Int             @default(3000)
	subtotalAmount     Int             @default(0)
	taxAmount          Int             @default(0)
	shippingAmount     Int             @default(0)
	totalAmount        Int
	currency           String          @default("EUR")
	paymentProvider    PaymentProvider @default(TEST)
	providerIntentId   String?
	shippingAddressId  String?
	billingAddressId   String?
	// Shipping fields
	shippingMethod     String?         // "STANDARD" | "EXPRESS"
	shippingServiceName String?        // ex: "DHL Paket Intl"
	createdAt          DateTime        @default(now())
	updatedAt          DateTime        @updatedAt

	// Relations
	buyer      User        @relation(fields: [buyerId], references: [id], onDelete: Cascade)
	items      OrderItem[]
	shippingAddress Address? @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
	billingAddress  Address? @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
	invoice    Invoice?
	digitalEntitlements DigitalEntitlement[]
	fulfillmentOrders FulfillmentOrder[]
	shipments  Shipment[]

	@@index([buyerId, createdAt])
	@@map("orders")
}

model OrderItem {
	id         String        @id @default(cuid())
	orderId    String
	artistId   String
	kind       OrderItemKind
	artworkId  String?
	editionId  String?
	quantity   Int           @default(1)
	unitAmount Int
	subtotal   Int
	createdAt  DateTime      @default(now())

	// Relations
	order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
	artist  Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
	artwork Artwork? @relation(fields: [artworkId], references: [id], onDelete: SetNull)
	edition Edition? @relation(fields: [editionId], references: [id], onDelete: SetNull)
	payouts Payout[]
	fulfillmentItems FulfillmentItem[]

	@@map("order_items")
}

model Address {
	id         String   @id @default(cuid())
	userId     String?
	line1      String
	line2      String?
	city       String
	region     String?
	postalCode String?
	country    String
	isBusiness Boolean  @default(false)
	vatId      String?
	createdAt  DateTime @default(now())
	updatedAt  DateTime @updatedAt

	// Relations
	user            User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
	shippingOrders  Order[] @relation("OrderShippingAddress")
	billingOrders   Order[] @relation("OrderBillingAddress")

	@@map("addresses")
}

model Payout {
	id                 String         @id @default(cuid())
	artistId           String
	orderItemId        String
	amount             Int
	currency           String         @default("EUR")
	status             PayoutStatus   @default(PENDING)
	provider           PayoutProvider @default(TEST)
	providerTransferId String?
	availableAt        DateTime?      // when payout becomes available (for delayed payouts)
	createdAt          DateTime       @default(now())
	updatedAt          DateTime       @updatedAt

	// Relations
	artist    Artist     @relation(fields: [artistId], references: [id], onDelete: Cascade)
	orderItem OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

	@@index([artistId, createdAt])
	@@map("payouts")
}

model AuditLog {
	id         String   @id @default(cuid())
	actorId    String?
	action     String
	entityType String?
	entityId   String?
	ip         String?
	userAgent  String?
	data       Json?
	createdAt  DateTime @default(now())

	// Relations
	actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

	@@index([actorId, action, createdAt])
	@@index([entityType, entityId, createdAt])
	@@map("audit_logs")
}

// Auth.js (NextAuth) tables
model Account {
	id                String  @id @default(cuid())
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String? @db.Text
	access_token      String? @db.Text
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String? @db.Text
	session_state     String?
	user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
	@@map("accounts")
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime
	user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@map("sessions")
}

model VerificationToken {
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
	@@map("verification_tokens")
}

model KycVerification {
	id              String           @id @default(cuid())
	artistId        String           @unique
	status          KycStatus        @default(PENDING)
	provider        String           @default("MANUAL")
	country         String
	documentType    KycDocumentType
	docLast4        String?
	frontImageUrl   String?
	backImageUrl    String?
	selfieImageUrl  String?
	notes           String?
	reviewedById    String?
	reviewedAt      DateTime?
	createdAt       DateTime         @default(now())
	updatedAt       DateTime         @updatedAt

	// Relations
	artist          Artist           @relation(fields: [artistId], references: [id], onDelete: Cascade)

	@@index([status, createdAt])
	@@map("kyc_verifications")
}

model Cart {
	id           String    @id @default(cuid())
	userId       String?
	anonymousId  String?   @unique
	currency     String    @default("EUR")
	createdAt    DateTime  @default(now())
	updatedAt    DateTime  @updatedAt
	items        CartItem[]
	@@index([userId])
	@@map("carts")
}

model CartItem {
	id          String   @id @default(cuid())
	cartId      String
	artistId    String
	kind        ArtworkKind     // ORIGINAL | EDITIONED | DIGITAL (reuse enum)
	artworkId   String?
	editionId   String?
	quantity    Int
	unitAmount  Int             // frozen price (minor units)
	currency    String @default("EUR")
	createdAt   DateTime @default(now())
	cart        Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
	artwork     Artwork? @relation(fields: [artworkId], references: [id], onDelete: SetNull)
	edition     Edition? @relation(fields: [editionId], references: [id], onDelete: SetNull)
	@@index([cartId])
	@@map("cart_items")
}

model ArtworkHold {
	id         String   @id @default(cuid())
	artworkId  String   @unique
	orderId    String?
	expiresAt  DateTime
	createdAt  DateTime @default(now())
	artwork    Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
	@@map("artwork_holds")
}

model DigitalEntitlement {
	id              String   @id @default(cuid())
	orderId         String
	userId          String
	editionId       String
	token           String   @unique           // token persistent pe care îl putem roti
	maxDownloads    Int      @default(5)
	downloadsCount  Int      @default(0)
	expiresAt       DateTime?
	lastDownloadedAt DateTime?
	createdAt       DateTime @default(now())
	
	// Relations
	order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
	user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
	edition Edition @relation(fields: [editionId], references: [id], onDelete: Cascade)
	
	@@index([userId, createdAt])
	@@map("digital_entitlements")
}

model Invoice {
	id             String   @id @default(cuid())
	orderId        String   @unique
	number         String   @unique
	series         String
	issuedAt       DateTime @default(now())
	currency       String   @default("EUR")
	sellerName     String
	sellerVatId    String?
	sellerRegNo    String?
	sellerAddress  Json
	buyerName      String
	buyerVatId     String?
	buyerAddress   Json
	subtotalAmount Int
	taxAmount      Int
	shippingAmount Int
	totalAmount    Int
	notes          String?
	pdfStorageKey  String?
	createdAt      DateTime @default(now())
	order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
	items          InvoiceItem[]
	@@map("invoices")
}

model InvoiceItem {
	id            String  @id @default(cuid())
	invoiceId     String
	description   String
	quantity      Int
	unitAmount    Int      // minor units
	taxRate       Decimal? // ex: 0.19 (19%)
	taxAmount     Int
	totalAmount   Int      // unit*qty + tax
	invoice       Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
	@@map("invoice_items")
}

model VatValidationCache {
	id         String   @id @default(cuid())
	country    String
	vatId      String
	valid      Boolean
	name       String?
	address    String?
	checkedAt  DateTime @default(now())
	@@unique([country, vatId])
	@@map("vat_validation_cache")
}

model InvoiceCounter {
	id       String  @id @default(cuid())
	series   String
	year     Int
	nextNo   Int
	@@unique([series, year])
	@@map("invoice_counters")
}

model FulfillmentOrder {
	id               String            @id @default(cuid())
	orderId          String
	provider         String            // "INHOUSE"
	providerOrderId  String?
	status           FulfillmentStatus @default(DRAFT)
	shippingMethod   String?
	costAmount       Int               @default(0)   // cost intern opțional
	currency         String            @default("EUR")
	trackingNumbers  Json?
	rawPayload       Json?
	assignedToUserId String?
	startedAt        DateTime?
	finishedAt       DateTime?
	qcPassedAt       DateTime?
	labelsStorageKey String?
	jobTicketKey     String?
	createdAt        DateTime          @default(now())
	updatedAt        DateTime          @updatedAt
	
	// Relations
	order   Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
	items   FulfillmentItem[]
	
	@@index([orderId, status])
	@@map("fulfillment_orders")
}

model FulfillmentItem {
	id             String   @id @default(cuid())
	fulfillmentId  String
	orderItemId    String
	editionId      String?
	quantity       Int
	material       String?  // "CANVAS" | "METAL"
	sizeName       String?
	widthCm        Decimal?
	heightCm       Decimal?
	sourceImageKey String?
	providerSku    String?
	
	// Relations
	fulfillment FulfillmentOrder @relation(fields: [fulfillmentId], references: [id], onDelete: Cascade)
	orderItem   OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
	
	@@map("fulfillment_items")
}

model ModerationItem {
	id           String           @id @default(cuid())
	entityType   String           // "ARTWORK" | "ARTIST" | "IMAGE"
	entityId     String
	status       ModerationStatus @default(PENDING)
	reason       String?
	autoSignals  Json?            // results from classifier (scores)
	reviewerId   String?
	createdAt    DateTime         @default(now())
	updatedAt    DateTime         @updatedAt

	// Relations
	actions ModerationAction[]

	@@index([entityType, status, createdAt])
	@@map("moderation_items")
}

model ModerationAction {
	id         String   @id @default(cuid())
	itemId     String
	actorId    String
	action     String   // "APPROVE" | "REJECT" | "MARK_MATURE" | "BAN" | "UNBAN" | "SHADOWBAN" | "UNSHADOWBAN"
	notes      String?
	createdAt  DateTime @default(now())

	// Relations
	item ModerationItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

	@@map("moderation_actions")
}

model Report {
	id          String   @id @default(cuid())
	reporterId  String?
	entityType  String   // "ARTWORK" | "ARTIST"
	entityId    String
	category    String   // "nudity" | "hate" | "copyright" | "spam" | "other"
	message     String?
	status      String   @default("OPEN") // OPEN | CLOSED | MERGED
	createdAt   DateTime @default(now())
	closedAt    DateTime?

	@@index([entityType, entityId, status, createdAt])
	@@map("reports")
}

model Shipment {
	id              String         @id @default(cuid())
	orderId         String
	method          String         // "STANDARD" | "EXPRESS"
	provider        String         // "INHOUSE" | "SHIPPO" | "EASYPOST"
	serviceName     String?        // ex: "DHL Paket Intl"
	zone            String?
	insuredAmount   Int            @default(0)
	currency        String         @default("EUR")
	status          ShipmentStatus @default(READY_TO_SHIP)
	labelStorageKey String?
	trackingNumbers Json?
	createdAt       DateTime       @default(now())
	updatedAt       DateTime       @updatedAt

	// Relations
	order     Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
	packages  ShipmentPackage[]

	@@index([orderId, status])
	@@map("shipments")
}

model ShipmentPackage {
	id           String   @id @default(cuid())
	shipmentId   String
	kind         String   // "BOX" | "TUBE"
	refId        String?  // BX_M / TB_L etc.
	lengthCm     Decimal
	widthCm      Decimal?
	heightCm     Decimal?
	diameterCm   Decimal?
	weightKg     Decimal
	dimWeightKg  Decimal
	items        Json     // [{orderItemId, qty, artworkId}]
	
	// Relations
	shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

	@@map("shipment_packages")
}



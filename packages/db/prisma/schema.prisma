// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
	directUrl = env("DIRECT_URL")
}

enum UserRole {
	ADMIN
	ARTIST
	BUYER
	CURATOR
}

enum AddressType {
	SHIPPING
	BILLING
}

enum KycStatus {
	PENDING
	APPROVED
	REJECTED
}

enum KycDocumentType {
	ID_CARD
	PASSPORT
	DRIVER_LICENSE
	OTHER
}

enum ArtworkStatus {
	DRAFT
	PUBLISHED
	SOLD
	ARCHIVED
}

enum ArtworkVisibility {
	PUBLIC
	PRIVATE
}

enum ArtworkKind {
	ORIGINAL
	EDITIONED
	DIGITAL
}

enum ProductMedium {
	PAINTING
	DRAWING
	PHOTOGRAPHY
	DIGITAL
}

enum ProductType {
	ORIGINAL
	PRINT
}

enum ImageKind {
	ARTWORK
	AVATAR
	COVER
	KYC
}

enum EditionType {
	PRINT
	DIGITAL
}

enum PrintMaterial {
	CANVAS
	METAL
}

enum OrderStatus {
	PENDING
	PAID
	FAILED
	REFUNDED
	CANCELLED
}

enum PaymentProvider {
	STRIPE
	PAYPAL
	TEST
}

enum OrderItemKind {
	ORIGINAL
	PRINT
	DIGITAL
}

enum PayoutStatus {
	PENDING
	PAID
	FAILED
	REVERSED
	PROCESSING
}

enum PayoutProvider {
	STRIPE
	MANUAL
	TEST
}

enum FulfillmentStatus {
	DRAFT
	SUBMITTED
	IN_PRODUCTION
	SHIPPED
	DELIVERED
	CANCELLED
	FAILED
}

enum ModerationStatus {
	PENDING
	APPROVED
	REJECTED
	MATURE
}

enum ContentRating {
	SAFE
	MATURE
	PROHIBITED
}

enum ShipmentStatus {
	READY_TO_SHIP
	LABEL_PURCHASED
	IN_TRANSIT
	DELIVERED
	CANCELLED
}

enum ReturnStatus {
	REQUESTED
	APPROVED
	RECEIVED
	QC_PASSED
	QC_FAILED
	RESTOCKED
	REFUNDED
	CLOSED
}

enum RefundStatus {
	PENDING
	SUCCEEDED
	FAILED
	CANCELED
}

enum CreditNoteStatus {
	DRAFT
	PENDING
	ISSUED
	VOID
}

enum DsTaskStatus {
  PENDING
  PROCESSING
  DONE
  FAILED
  EXPIRED
  CANCELED
}

enum DeletionStatus {
  REQUESTED
  CONFIRMED
  PROCESSING
  DONE
  REJECTED
  CANCELED
}

enum ConsentKind {
  ANALYTICS
  MARKETING
  NECESSARY
}

enum ConsentSource {
  CMP
  UI
  BACKOFFICE
  IMPORT
}

enum LegalKind {
  TOS
  PRIVACY
  COOKIES
}

enum InquiryType {
  QUESTION
  COMMISSION
}

enum InquiryStatus {
  NEW
  QUALIFIED
  AWAITING_ARTIST
  QUOTE_SENT
  DEPOSIT_PAID
  IN_PROGRESS
  PROOF_REVIEW
  DELIVERED
  WON
  LOST
  CANCELED
}

enum MessageRole {
  CLIENT
  CURATOR
  ARTIST
  SYSTEM
}

enum MilestoneStatus {
  DUE
  AUTHORIZED
  CAPTURED
  RELEASED
  CANCELED
}

enum PriceRounding {
	NONE
	END_00
	END_90
	END_99
}

enum CampaignScope { 
	GLOBAL 
	MEDIUM 
	ARTIST 
	ARTWORK 
	EDITION_KIND 
}

enum EditionKind { 
	ORIGINAL 
	CANVAS 
	METAL 
	PHOTO 
}

model User {
	id           String   @id @default(cuid())
	email        String?  @unique
	name         String?
	emailVerified DateTime?
	image        String?
	role         UserRole @default(BUYER)
	passwordHash String?
	deletedAt    DateTime?
	anonymizedAt DateTime?
	deletionReason String?
	createdAt    DateTime @default(now())
	updatedAt    DateTime @updatedAt

	// Relations
	artist     Artist?
	orders     Order[]
	addresses  Address[]
	auditLogs  AuditLog[]
	accounts   Account[]
	sessions   Session[]
	digitalEntitlements DigitalEntitlement[]
	adminNotes AdminNote[]
	consents   Consent[]
	legalAcceptances LegalAcceptance[]
	dataExportTasks DataExportTask[]
	deletionRequests DeletionRequest[]
	inquiries  Inquiry[] @relation("ClientInquiries")
	curatedInquiries Inquiry[] @relation("CuratorInquiries")
	favorites  Favorite[]
	curatorBadges CuratorBadge[] @relation("CuratorBadges")
	notifPrefs UserNotifPref?
	notifications Notification[]
	partners Partner[]
	creatorCodes CreatorCode[]
	curatorProfile CuratorProfile?
	tickets Ticket[] @relation("CustomerTickets")
	messages Message[]

	@@map("users")
}

model Artist {
	id              String   @id @default(cuid())
	userId          String   @unique
	slug            String   @unique
	displayName     String
	avatarUrl       String?
	coverUrl        String?
	locationCity    String?
	locationCountry String?
	bio             String?
	statement       String?
	education       Json?
	exhibitions     Json?
	awards          Json?
	socials         Json?
	onboardingStep  Int      @default(1)
	completionScore Int      @default(0)
	slugLockedAt    DateTime?
	kycStatus       KycStatus @default(PENDING)
	// NEW Stripe Connect fields:
	stripeAccountId      String?   @unique
	payoutsEnabled       Boolean   @default(false)
	connectStatus        String?   // e.g., "onboarding_required" | "complete" | "restricted"
	connectRequirements  Json?
	// Moderation fields
	banned          Boolean @default(false)
	banReason       String?
	shadowbanned    Boolean @default(false)
	trustScore      Int     @default(50)
	// i18n fields
	displayNameLocalized Json?   // { en: "John Doe", ro: "Ion Pop" }
	bioLocalized         Json?   // { en: "...", ro: "..." }
	slugEn               String? @unique
	slugRo               String? @unique
	createdAt       DateTime @default(now())
	updatedAt       DateTime @updatedAt

	// Relations
	user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
	artworks        Artwork[]
	orderItems      OrderItem[]
	payouts         Payout[]
	kycVerification KycVerification?
	images          Image[]
	inquiries       Inquiry[]
	stats           ArtistStat?
	artistShareLinks ArtistShareLink[]
	tickets         Ticket[]

	@@map("artists")
}

model Artwork {
	id             String            @id @default(cuid())
	artistId       String
	slug           String            @unique
	title          String
	description    String?
	year           Int?
	medium         String?
	widthCm        Decimal?
	heightCm       Decimal?
	depthCm        Decimal?
	framed         Boolean           @default(false)
	category       String?
	status         ArtworkStatus     @default(DRAFT)
	visibility     ArtworkVisibility @default(PRIVATE)
	heroImageUrl   String?
	priceAmount    Int?
	priceCurrency  String            @default("EUR")
	kind           ArtworkKind
	publishedAt    DateTime?
	// Pricing fields
	priceMinor     Int?              // preț listat (pentru ORIGINAL sau PRINT ed. unică)
	currency       String?           @default("EUR")
	weightKg       Decimal?
	published      Boolean           @default(false)
	onSale         Boolean           @default(false)
	saleMinor      Int?              // optional sale price (<= priceMinor)
	// Moderation fields
	moderationStatus ModerationStatus @default(PENDING)
	contentRating    ContentRating    @default(SAFE)
	flaggedCount     Int              @default(0)
	lastReviewedAt   DateTime?
	suppressed       Boolean          @default(false)
	// i18n fields
	titleLocalized       Json?   // { en: "Sunset", ro: "Apus" }
	descriptionLocalized Json?
	slugEn               String? @unique
	slugRo               String? @unique
	createdAt      DateTime          @default(now())
	updatedAt      DateTime          @updatedAt

	// Relations
	artist    Artist     @relation(fields: [artistId], references: [id], onDelete: Cascade)
	editions  Edition[]
	images    Image[]
	orderItems OrderItem[]
	cartItems CartItem[]
	hold      ArtworkHold?
	inquiries Inquiry[]
	favorites Favorite[]
	stats     ArtworkStat?
	badges    CuratorBadge[]
	collectionItems CollectionItem[]
	tickets   Ticket[]

	@@index([artistId, status])
	@@index([moderationStatus, suppressed, contentRating])
	@@map("artworks")
}

model Edition {
	id               String       @id @default(cuid())
	artworkId        String
	sku              String       @unique
	runSize          Int?
	available        Int?
	type             EditionType
	unitAmount       Int?
	currency         String       @default("EUR")
	downloadableUrl  String?
	// NEW optional fields for prints:
	material         PrintMaterial?
	sizeName         String?       // e.g., "30x40 cm", "50x70 cm"
	widthCm          Decimal?
	heightCm         Decimal?
	// NEW fields for digital delivery:
	privateFileKey   String?       // storage key in private bucket
	fileBytes        Int?          // file size in bytes
	contentType      String?       // MIME type
	checksumSha256   String?       // SHA256 hash for integrity
	// Pricing fields
	kind             String?       // "ORIGINAL" | "CANVAS" | "METAL" | "PHOTO"
	sizeLabel        String?       // ex: "30x40", "50x70"
	editionSize      Int?          // ex: 25 (pentru printuri numerotate)
	priceMinor       Int?          // dacă setat, override pentru cotație
	onSale           Boolean       @default(false)
	saleMinor        Int?
	active           Boolean       @default(true)
	createdAt        DateTime     @default(now())
	updatedAt        DateTime     @updatedAt

	// Relations
	artwork    Artwork     @relation(fields: [artworkId], references: [id], onDelete: Cascade)
	orderItems OrderItem[]
	cartItems  CartItem[]
	entitlements DigitalEntitlement[]

	@@map("editions")
}

model Image {
	id           String    @id @default(cuid())
	artworkId    String?
	artistId     String?
	kind         ImageKind @default(ARTWORK)
	url          String
	width        Int?
	height       Int?
	position     Int       @default(0)
	alt          String?
	storageKey   String?
	contentType  String?
	sizeBytes    Int?
	variantMeta  Json?
	isPrintMaster Boolean  @default(false)
	createdAt    DateTime  @default(now())

	// Relations
	artwork Artwork? @relation(fields: [artworkId], references: [id], onDelete: Cascade)
	artist  Artist?  @relation(fields: [artistId], references: [id], onDelete: Cascade)

	@@index([artworkId, createdAt])
	@@index([artistId, kind])
	@@map("images")
}

model Order {
	id                 String          @id @default(cuid())
	buyerId            String
	status             OrderStatus     @default(PENDING)
	platformFeeBps     Int             @default(3000)
	subtotalAmount     Int             @default(0)
	taxAmount          Int             @default(0)
	shippingAmount     Int             @default(0)
	totalAmount        Int
	currency           String          @default("EUR")
	paymentProvider    PaymentProvider @default(TEST)
	providerIntentId   String?
	shippingAddressId  String?
	billingAddressId   String?
	// Shipping fields
	shippingMethod     String?         // "STANDARD" | "EXPRESS"
	shippingServiceName String?        // ex: "DHL Paket Intl"
	// Admin fields
	refundedAmount     Int             @default(0)
	canceledAt         DateTime?
	artistShareLinkId  String?         // Optional link to artist share link for tracking
	createdAt          DateTime        @default(now())
	updatedAt          DateTime        @updatedAt

	// Relations
	buyer      User        @relation(fields: [buyerId], references: [id], onDelete: Cascade)
	items      OrderItem[]
	shippingAddress Address? @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
	billingAddress  Address? @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
	artistShareLink ArtistShareLink? @relation(fields: [artistShareLinkId], references: [id])
	invoice    Invoice?
	digitalEntitlements DigitalEntitlement[]
	fulfillmentOrders FulfillmentOrder[]
	shipments  Shipment[]
	refunds    Refund[]
	returns    Return[]
	creditNotes CreditNote[]

	@@index([buyerId, createdAt])
	@@map("orders")
}

model OrderItem {
	id         String        @id @default(cuid())
	orderId    String
	artistId   String
	kind       OrderItemKind
	artworkId  String?
	editionId  String?
	quantity   Int           @default(1)
	unitAmount Int
	subtotal   Int
	refundedQty Int          @default(0)
	createdAt  DateTime      @default(now())

	// Relations
	order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
	artist  Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
	artwork Artwork? @relation(fields: [artworkId], references: [id], onDelete: SetNull)
	edition Edition? @relation(fields: [editionId], references: [id], onDelete: SetNull)
	payouts Payout[]
	fulfillmentItems FulfillmentItem[]
	returnItems ReturnItem[]

	@@map("order_items")
}

model Address {
	id            String   @id @default(cuid())
	userId        String?
	type          AddressType
	firstName     String
	lastName      String
	company       String?
	addressLine1  String
	addressLine2  String?
	city          String
	region        String?
	postalCode    String
	country       String
	phone         String?
	phoneEncId    String?  // FK to PiiCipher for encrypted phone
	isBusiness    Boolean  @default(false)
	vatId         String?
	createdAt     DateTime @default(now())
	updatedAt     DateTime @updatedAt

	// Relations
	user            User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
	shippingOrders  Order[] @relation("OrderShippingAddress")
	billingOrders   Order[] @relation("OrderBillingAddress")
	phoneCipher     PiiCipher? @relation(fields: [phoneEncId], references: [id])

	@@map("addresses")
}

model Payout {
	id                 String         @id @default(cuid())
	artistId           String
	orderItemId        String
	amount             Int
	currency           String         @default("EUR")
	status             PayoutStatus   @default(PENDING)
	provider           PayoutProvider @default(TEST)
	providerTransferId String?
	availableAt        DateTime?      // when payout becomes available (for delayed payouts)
	createdAt          DateTime       @default(now())
	updatedAt          DateTime       @updatedAt

	// Relations
	artist    Artist     @relation(fields: [artistId], references: [id], onDelete: Cascade)
	orderItem OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

	@@index([artistId, createdAt])
	@@map("payouts")
}

model AuditLog {
	id         String   @id @default(cuid())
	actorId    String?
	action     String
	entityType String?
	entityId   String?
	ip         String?
	userAgent  String?
	data       Json?
	createdAt  DateTime @default(now())

	// Relations
	actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

	@@index([actorId, action, createdAt])
	@@index([entityType, entityId, createdAt])
	@@map("audit_logs")
}

// Auth.js (NextAuth) tables
model Account {
	id                String  @id @default(cuid())
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String? @db.Text
	access_token      String? @db.Text
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String? @db.Text
	session_state     String?
	user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
	@@map("accounts")
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime
	user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@map("sessions")
}

model VerificationToken {
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
	@@map("verification_tokens")
}

model KycVerification {
	id              String           @id @default(cuid())
	artistId        String           @unique
	status          KycStatus        @default(PENDING)
	provider        String           @default("MANUAL")
	country         String
	documentType    KycDocumentType
	docLast4        String?
	frontImageUrl   String?
	backImageUrl    String?
	selfieImageUrl  String?
	notes           String?
	reviewedById    String?
	reviewedAt      DateTime?
	createdAt       DateTime         @default(now())
	updatedAt       DateTime         @updatedAt

	// Relations
	artist          Artist           @relation(fields: [artistId], references: [id], onDelete: Cascade)

	@@index([status, createdAt])
	@@map("kyc_verifications")
}

model Cart {
	id           String    @id @default(cuid())
	userId       String?
	anonymousId  String?   @unique
	currency     String    @default("EUR")
	createdAt    DateTime  @default(now())
	updatedAt    DateTime  @updatedAt
	items        CartItem[]
	@@index([userId])
	@@map("carts")
}

model CartItem {
	id          String   @id @default(cuid())
	cartId      String
	artistId    String
	kind        ArtworkKind     // ORIGINAL | EDITIONED | DIGITAL (reuse enum)
	artworkId   String?
	editionId   String?
	quantity    Int
	unitAmount  Int             // frozen price (minor units)
	currency    String @default("EUR")
	createdAt   DateTime @default(now())
	cart        Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
	artwork     Artwork? @relation(fields: [artworkId], references: [id], onDelete: SetNull)
	edition     Edition? @relation(fields: [editionId], references: [id], onDelete: SetNull)
	@@index([cartId])
	@@map("cart_items")
}

model ArtworkHold {
	id         String   @id @default(cuid())
	artworkId  String   @unique
	orderId    String?
	expiresAt  DateTime
	createdAt  DateTime @default(now())
	artwork    Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
	@@map("artwork_holds")
}

model DigitalEntitlement {
	id              String   @id @default(cuid())
	orderId         String
	userId          String
	editionId       String
	token           String   @unique           // token persistent pe care îl putem roti
	maxDownloads    Int      @default(5)
	downloadsCount  Int      @default(0)
	expiresAt       DateTime?
	lastDownloadedAt DateTime?
	createdAt       DateTime @default(now())
	
	// Relations
	order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
	user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
	edition Edition @relation(fields: [editionId], references: [id], onDelete: Cascade)
	
	@@index([userId, createdAt])
	@@map("digital_entitlements")
}

model Invoice {
	id             String   @id @default(cuid())
	orderId        String   @unique
	number         String   @unique
	series         String
	issuedAt       DateTime @default(now())
	currency       String   @default("EUR")
	sellerName     String
	sellerVatId    String?
	sellerRegNo    String?
	sellerAddress  Json
	buyerName      String
	buyerVatId     String?
	buyerAddress   Json
	subtotalAmount Int
	taxAmount      Int
	shippingAmount Int
	totalAmount    Int
	notes          String?
	pdfStorageKey  String?
	createdAt      DateTime @default(now())
	order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
	items          InvoiceItem[]
	@@map("invoices")
}

model InvoiceItem {
	id            String  @id @default(cuid())
	invoiceId     String
	description   String
	quantity      Int
	unitAmount    Int      // minor units
	taxRate       Decimal? // ex: 0.19 (19%)
	taxAmount     Int
	totalAmount   Int      // unit*qty + tax
	invoice       Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
	@@map("invoice_items")
}

model VatValidationCache {
	id         String   @id @default(cuid())
	country    String
	vatId      String
	valid      Boolean
	name       String?
	address    String?
	checkedAt  DateTime @default(now())
	@@unique([country, vatId])
	@@map("vat_validation_cache")
}

model InvoiceCounter {
	id       String  @id @default(cuid())
	series   String
	year     Int
	nextNo   Int
	@@unique([series, year])
	@@map("invoice_counters")
}

model FulfillmentOrder {
	id               String            @id @default(cuid())
	orderId          String
	provider         String            // "INHOUSE"
	providerOrderId  String?
	status           FulfillmentStatus @default(DRAFT)
	shippingMethod   String?
	costAmount       Int               @default(0)   // cost intern opțional
	currency         String            @default("EUR")
	trackingNumbers  Json?
	rawPayload       Json?
	assignedToUserId String?
	startedAt        DateTime?
	finishedAt       DateTime?
	qcPassedAt       DateTime?
	labelsStorageKey String?
	jobTicketKey     String?
	createdAt        DateTime          @default(now())
	updatedAt        DateTime          @updatedAt
	
	// Relations
	order   Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
	items   FulfillmentItem[]
	
	@@index([orderId, status])
	@@map("fulfillment_orders")
}

model FulfillmentItem {
	id             String   @id @default(cuid())
	fulfillmentId  String
	orderItemId    String
	editionId      String?
	quantity       Int
	material       String?  // "CANVAS" | "METAL"
	sizeName       String?
	widthCm        Decimal?
	heightCm       Decimal?
	sourceImageKey String?
	providerSku    String?
	
	// Relations
	fulfillment FulfillmentOrder @relation(fields: [fulfillmentId], references: [id], onDelete: Cascade)
	orderItem   OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
	
	@@map("fulfillment_items")
}

model ModerationItem {
	id           String           @id @default(cuid())
	entityType   String           // "ARTWORK" | "ARTIST" | "IMAGE"
	entityId     String
	status       ModerationStatus @default(PENDING)
	reason       String?
	autoSignals  Json?            // results from classifier (scores)
	reviewerId   String?
	createdAt    DateTime         @default(now())
	updatedAt    DateTime         @updatedAt

	// Relations
	actions ModerationAction[]

	@@index([entityType, status, createdAt])
	@@map("moderation_items")
}

model ModerationAction {
	id         String   @id @default(cuid())
	itemId     String
	actorId    String
	action     String   // "APPROVE" | "REJECT" | "MARK_MATURE" | "BAN" | "UNBAN" | "SHADOWBAN" | "UNSHADOWBAN"
	notes      String?
	createdAt  DateTime @default(now())

	// Relations
	item ModerationItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

	@@map("moderation_actions")
}

model Report {
	id          String   @id @default(cuid())
	reporterId  String?
	entityType  String   // "ARTWORK" | "ARTIST"
	entityId    String
	category    String   // "nudity" | "hate" | "copyright" | "spam" | "other"
	message     String?
	status      String   @default("OPEN") // OPEN | CLOSED | MERGED
	createdAt   DateTime @default(now())
	closedAt    DateTime?

	@@index([entityType, entityId, status, createdAt])
	@@map("reports")
}

model Shipment {
	id              String         @id @default(cuid())
	orderId         String
	method          String         // "STANDARD" | "EXPRESS"
	provider        String         // "INHOUSE" | "SHIPPO" | "EASYPOST"
	serviceName     String?        // ex: "DHL Paket Intl"
	zone            String?
	insuredAmount   Int            @default(0)
	currency        String         @default("EUR")
	status          ShipmentStatus @default(READY_TO_SHIP)
	labelStorageKey String?
	trackingNumbers Json?
	handedOverAt    DateTime?      // when marked in transit
	deliveredAt     DateTime?      // when marked delivered
	createdAt       DateTime       @default(now())
	updatedAt       DateTime       @updatedAt

	// Relations
	order     Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
	packages  ShipmentPackage[]

	@@index([orderId, status])
	@@map("shipments")
}

model ShipmentPackage {
	id           String   @id @default(cuid())
	shipmentId   String
	kind         String   // "BOX" | "TUBE"
	refId        String?  // BX_M / TB_L etc.
	lengthCm     Decimal
	widthCm      Decimal?
	heightCm     Decimal?
	diameterCm   Decimal?
	weightKg     Decimal
	dimWeightKg  Decimal
	items        Json     // [{orderItemId, qty, artworkId}]
	
	// Relations
	shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

	@@map("shipment_packages")
}

model AdminNote {
	id         String   @id @default(cuid())
	entityType String   // "ORDER" | "ARTWORK" | "ARTIST" | "USER" | "SHIPMENT"
	entityId   String
	authorId   String
	body       String
	createdAt  DateTime @default(now())

	// Relations
	author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

	@@index([entityType, entityId, createdAt])
	@@map("admin_notes")
}

model Return {
	id         String       @id @default(cuid())
	orderId    String
	status     ReturnStatus @default(REQUESTED)
	reason     String?
	approvedBy String?
	receivedAt DateTime?
	qcNotes    String?
	outcome    String?      // "REFUND_FULL" | "REFUND_PARTIAL" | "NO_REFUND"
	// Additional fields for RMA workflow
	customerNotes String?
	adminNotes    String?
	qcPassed      Boolean?
	qcAt          DateTime?
	restockedAt   DateTime?
	createdAt     DateTime  @default(now())
	updatedAt     DateTime  @updatedAt

	// Relations
	order Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
	items ReturnItem[]
	creditNotes CreditNote[]

	@@index([orderId, status, createdAt])
	@@map("returns")
}

model ReturnItem {
	id          String @id @default(cuid())
	returnId    String
	orderItemId String
	qty         Int    @default(1)
	reason      String?
	// QC fields
	qcPassed    Boolean?
	qcNotes     String?
	createdAt   DateTime @default(now())

	// Relations
	return    Return    @relation(fields: [returnId], references: [id], onDelete: Cascade)
	orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

	@@map("return_items")
}

model Refund {
	id               String       @id @default(cuid())
	orderId          String
	status           RefundStatus @default(PENDING)
	amount           Int          // minor units
	currency         String       @default("EUR")
	provider         String       @default("STRIPE")
	providerRefundId String?
	reason           String?
	createdAt        DateTime     @default(now())
	updatedAt        DateTime     @updatedAt

	// Relations
	order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

	@@index([orderId, status, createdAt])
	@@map("refunds")
}

model CreditNote {
	id             String           @id @default(cuid())
	orderId        String
	returnId       String?
	invoiceId      String?
	number         String           @unique
	status         CreditNoteStatus @default(DRAFT)
	issuedAt       DateTime?
	reason         String?
	subtotalAmount Int              @default(0)
	taxAmount      Int              @default(0)
	totalAmount    Int              @default(0)
	currency       String           @default("EUR")
	pdfStorageKey  String?
	createdAt      DateTime         @default(now())

	// Relations
	order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
	return Return? @relation(fields: [returnId], references: [id], onDelete: SetNull)

	@@index([orderId, status, createdAt])
	@@map("credit_notes")
}

model WebhookEvent {
	id        String   @id @default(cuid())
	provider  String
	type      String
	raw       Json
	receivedAt DateTime @default(now())
	processed Boolean   @default(false)

	@@index([provider, type, receivedAt])
	@@map("webhook_events")
}

model Consent {
  id         String   @id @default(cuid())
  userId     String?
  anonymousId String?  @unique
  kind       ConsentKind
  granted    Boolean
  source     ConsentSource @default(CMP)
  country    String?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, kind, createdAt])
  @@map("consents")
}

model LegalDocument {
  id          String   @id @default(cuid())
  kind        LegalKind
  version     String
  url         String
  effectiveAt DateTime
  createdAt   DateTime @default(now())

  // Relations
  acceptances LegalAcceptance[]

  @@unique([kind, version])
  @@map("legal_documents")
}

model LegalAcceptance {
  id         String   @id @default(cuid())
  userId     String
  docId      String
  version    String
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  doc        LegalDocument @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@index([userId, version])
  @@map("legal_acceptances")
}

model DataExportTask {
  id          String   @id @default(cuid())
  userId      String
  status      DsTaskStatus @default(PENDING)
  format      String   @default("ZIP")
  storageKey  String?
  expiresAt   DateTime?
  requestedAt DateTime @default(now())
  completedAt DateTime?
  error       String?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, requestedAt])
  @@map("data_export_tasks")
}

model DeletionRequest {
  id          String   @id @default(cuid())
  userId      String
  status      DeletionStatus @default(REQUESTED)
  reason      String?
  tokenHash   String   @unique           // confirm token hash (not raw)
  requestedAt DateTime @default(now())
  confirmedAt DateTime?
  scheduledAt DateTime?                  // now + graceDays
  processedAt DateTime?
  error       String?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status, scheduledAt])
  @@map("deletion_requests")
}

model ErasureTombstone {
  id         String   @id @default(cuid())
  emailHash  String?  @unique
  userId     String?
  createdAt  DateTime @default(now())
  reason     String?

  @@map("erasure_tombstones")
}

model PiiCipher {
  id         String   @id @default(cuid())
  entityType String   // "Address" | ...
  entityId   String
  field      String   // "phone" | ...
  keyVersion Int
  iv         Bytes
  tag        Bytes
  ciphertext Bytes
  createdAt  DateTime @default(now())

  // Relations
  addresses  Address[]

  @@index([entityType, entityId, field])
  @@map("pii_ciphers")
}

model RumEvent {
  id        String   @id @default(cuid())
  t         String   // metric type (FCP, LCP, CLS, INP, TTFB)
  v         Float
  route     String?
  url       String?
  d         String?  // device hint
  ts        DateTime @default(now())

  @@map("rum_events")
}

model Inquiry {
  id            String @id @default(cuid())
  type          InquiryType
  status        InquiryStatus @default(NEW)
  clientId      String?      // nullable dacă guest; păstrăm doar email în separat mascat
  clientEmail   String?      // NEVER expus artistului
  artistId      String
  artworkId     String?
  locale        String @default("en")
  budgetMin     Int?      // minor units
  budgetMax     Int?
  dimensions    String?   // liber (ex: 80x120 cm)
  deadlineAt    DateTime?
  notes         String?
  curatorId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  client        User?    @relation("ClientInquiries", fields: [clientId], references: [id], onDelete: SetNull)
  artist        Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artwork       Artwork? @relation(fields: [artworkId], references: [id], onDelete: SetNull)
  curator       User?    @relation("CuratorInquiries", fields: [curatorId], references: [id], onDelete: SetNull)
  messages      InquiryMessage[]
  files         InquiryFile[]
  quote         CommissionQuote?
  milestones    CommissionMilestone[]

  @@index([artistId, status, createdAt])
  @@index([curatorId, status, createdAt])
  @@map("inquiries")
}

model InquiryMessage {
  id        String @id @default(cuid())
  inquiryId String
  role      MessageRole
  body      String        // redacted & stored safe
  createdAt DateTime @default(now())

  // Relations
  inquiry   Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)

  @@map("inquiry_messages")
}

model InquiryFile {
  id         String @id @default(cuid())
  inquiryId  String
  storageKey String
  kind       String  // "REF" | "PROOF" | "FINAL"
  mime       String?
  size       Int?
  createdAt  DateTime @default(now())

  // Relations
  inquiry    Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)

  @@map("inquiry_files")
}

model CommissionQuote {
  id          String @id @default(cuid())
  inquiryId   String @unique
  number      String @unique
  currency    String @default("EUR")
  subtotal    Int
  taxAmount   Int  @default(0)
  total       Int
  depositBps  Int  @default(3000)
  terms       String?
  pdfKey      String?
  createdAt   DateTime @default(now())

  // Relations
  inquiry     Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)

  @@map("commission_quotes")
}

model CommissionMilestone {
  id            String @id @default(cuid())
  inquiryId     String
  title         String
  amount        Int
  currency      String @default("EUR")
  status        MilestoneStatus @default(DUE)
  stripePiId    String?
  capturedAt    DateTime?
  releasedAt    DateTime?
  createdAt     DateTime @default(now())

  // Relations
  inquiry       Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)

  @@index([inquiryId, status])
  @@map("commission_milestones")
}

// Social Proof Models
model Favorite {
  id         String   @id @default(cuid())
  userId     String
  artworkId  String
  createdAt  DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artwork    Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  
  @@unique([userId, artworkId])
  @@index([artworkId, createdAt])
  @@map("favorites")
}

model ArtworkStat {
  artworkId      String   @id
  favoritesCount Int      @default(0)
  views24h       Int      @default(0)
  views7d        Int      @default(0)
  soldCount      Int      @default(0)
  countriesCount Int      @default(0)
  lastSoldAt     DateTime?
  updatedAt      DateTime @updatedAt
  
  // Relations
  artwork        Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  
  @@map("artwork_stats")
}

model ArtistStat {
  artistId       String   @id
  followersCount Int      @default(0)
  soldCountries  Int      @default(0)
  totalSold      Int      @default(0)
  updatedAt      DateTime @updatedAt
  
  // Relations
  artist         Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  @@map("artist_stats")
}

enum CuratorBadgeKind {
  CURATOR_PICK
  NEW_ARRIVAL
  TRENDING
  LIMITED_LEFT
  EDITION_SOLD_OUT
  SHIPS_FROM_RO
  FEATURED
}

model CuratorBadge {
  id          String           @id @default(cuid())
  kind        CuratorBadgeKind
  artworkId   String
  curatorId   String?
  notes       String?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  
  // Relations
  artwork     Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  curator     User?    @relation("CuratorBadges", fields: [curatorId], references: [id], onDelete: SetNull)
  
  @@index([artworkId, kind, expiresAt])
  @@map("curator_badges")
}

model CuratedCollection {
  id            String  @id @default(cuid())
  slug          String  @unique
  title         String
  subtitle      String?
  description   String?
  coverImageUrl String?
  heroTone      String  @default("DARK")  // DARK | LIGHT
  curatorId     String?                   // link la CuratorProfile
  curator       CuratorProfile? @relation(fields:[curatorId], references:[id])
  isFeatured    Boolean @default(false)
  sortIndex     Int     @default(0)
  publishedAt   DateTime?
  isPublic      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  items         CollectionItem[]
  
  @@index([isFeatured, sortIndex])
  @@map("curated_collections")
}

model CollectionItem {
  id           String  @id @default(cuid())
  collectionId String
  artworkId    String
  order        Int     @default(0)
  sortIndex    Int     @default(0)
  addedAt      DateTime @default(now())
  createdAt    DateTime @default(now())
  
  // Relations
  collection   CuratedCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  artwork      Artwork           @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  
  @@unique([collectionId, artworkId])
  @@index([collectionId, sortIndex])
  @@map("collection_items")
}

// =============================================================================
// Affiliates & Referrals System
// =============================================================================

enum ReferralKind {
  AFFILIATE
  CREATOR
}

enum ReferralStatus {
  ACTIVE
  PAUSED
  BANNED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAYABLE
  PAID
  VOID
  EARNED
  REVERSED
}

model Partner {
  id           String         @id @default(cuid())
  userId       String?        // if they have an account
  kind         ReferralKind   @default(AFFILIATE)
  name         String
  slug         String         @unique
  status       ReferralStatus @default(ACTIVE)
  defaultBps   Int            @default(1000) // basis points (10%)
  connectId    String?        // Stripe account id
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  user         User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  links        ReferralLink[]
  codes        CreatorCode[]
  payouts      CommissionPayout[]
  conversions  ReferralConversion[]
  
  @@index([userId])
  @@index([status])
  @@map("partners")
}

model ReferralLink {
  id        String   @id @default(cuid())
  partnerId String
  code      String   @unique // e.g., ABC123
  landing   String?  // /artist/slug or /artwork/slug or home
  createdAt DateTime @default(now())
  
  // Relations
  partner   Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  visits    ReferralVisit[]
  conversions ReferralConversion[]
  
  @@index([partnerId])
  @@index([code])
  @@map("referral_links")
}

model CreatorCode {
  id          String   @id @default(cuid())
  partnerId   String?  // if a curator has a code
  artistId    String?  // code issued by artist (one of max 5)
  code        String   @unique
  discountBps Int      @default(1000) // buyer discount
  bonusBps    Int      @default(500)  // bonus for artist/curator
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  partner     Partner? @relation(fields: [partnerId], references: [id], onDelete: SetNull)
  artist      User?    @relation(fields: [artistId], references: [id], onDelete: SetNull)
  conversions ReferralConversion[]
  visits      ReferralVisit[]
  
  @@index([partnerId])
  @@index([artistId])
  @@index([code])
  @@map("creator_codes")
}

model ReferralVisit {
  id        String   @id @default(cuid())
  linkId    String?
  codeId    String?
  ipHash    String?
  uaHash    String?
  source    String?  // instagram/youtube/...
  utm       Json?
  createdAt DateTime @default(now())
  
  // Relations
  link      ReferralLink? @relation(fields: [linkId], references: [id], onDelete: SetNull)
  code      CreatorCode? @relation(fields: [codeId], references: [id], onDelete: SetNull)
  
  @@index([linkId])
  @@index([codeId])
  @@index([ipHash, uaHash, createdAt])
  @@map("referral_visits")
}

model ReferralConversion {
  id              String           @id @default(cuid())
  orderId         String           @unique
  partnerId       String?
  linkId          String?
  codeId          String?
  kind            ReferralKind
  currency        String           @default("EUR")
  subtotalMinor   Int
  commissionMinor Int              @default(0)
  eurMinor        Int?             // for unified reporting
  status          CommissionStatus @default(PENDING)
  reason          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  partner         Partner?         @relation(fields: [partnerId], references: [id], onDelete: SetNull)
  link            ReferralLink?    @relation(fields: [linkId], references: [id], onDelete: SetNull)
  code            CreatorCode?     @relation(fields: [codeId], references: [id], onDelete: SetNull)
  
  @@index([partnerId])
  @@index([linkId])
  @@index([codeId])
  @@index([status])
  @@index([createdAt])
  @@map("referral_conversions")
}

model CommissionPayout {
  id              String   @id @default(cuid())
  partnerId       String
  amountMinor     Int
  currency        String   @default("EUR")
  stripePayoutId  String?
  periodStart     DateTime
  periodEnd       DateTime
  createdAt       DateTime @default(now())
  
  // Relations
  partner         Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  @@index([partnerId])
  @@index([stripePayoutId])
  @@map("commission_payouts")
}

// =============================================================================
// Notification System
// =============================================================================

enum NotifTopic {
  AUTH
  ORDER
  INVOICE
  SHIPPING
  CURATOR
  COMMISSION
  PAYOUT
  CART
  SYSTEM
  AFFILIATE
}

enum NotifChannel {
  EMAIL
  INAPP
}

enum NotifStatus {
  PENDING
  SENT
  FAILED
  CANCELED
}

model UserNotifPref {
  userId      String @id
  emailOrder  Boolean @default(true)
  emailCurator Boolean @default(true)
  emailAuth   Boolean @default(true)
  emailCart   Boolean @default(true)
  inappOrder  Boolean @default(true)
  inappCurator Boolean @default(true)
  inappAuth   Boolean @default(true)
  inappCart   Boolean @default(true)
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_notif_prefs")
}

model Notification {
  id        String       @id @default(cuid())
  userId    String?
  email     String
  topic     NotifTopic
  channel   NotifChannel
  template  String       // email template name
  payload   Json         // template payload
  status    NotifStatus  @default(PENDING)
  sentAt    DateTime?
  createdAt DateTime     @default(now())
  
  // Relations
  user      User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailLogs EmailLog[]
  
  @@index([userId, topic, createdAt])
  @@index([status, createdAt])
  @@map("notifications")
}

model EmailLog {
  id         String   @id @default(cuid())
  notifId    String
  to         String
  subject    String
  provider   String   // "RESEND", "SENDGRID", etc.
  providerId String?  // external provider ID
  status     String   // "sent", "error", "bounced"
  error      String?
  createdAt  DateTime @default(now())
  
  // Relations
  notification Notification @relation(fields: [notifId], references: [id], onDelete: Cascade)
  
  @@index([notifId])
  @@index([provider, status])
  @@map("email_logs")
}

// =============================================================================
// Artist Share Links (Analytics Tracking)
// =============================================================================

model ArtistShareLink {
  id         String   @id @default(cuid())
  artistId   String
  slug       String   @unique         // ex: a7X9Qp
  landing    String?                  // ex: /artist/john-doe sau /artwork/sunrise
  createdAt  DateTime @default(now())
  
  // Relations
  artist     Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  visits     ArtistShareVisit[]
  conversions ArtistShareConversion[]
  orders     Order[]
  
  @@index([artistId, createdAt])
  @@map("artist_share_links")
}

model ArtistShareVisit {
  id        String   @id @default(cuid())
  linkId    String
  source    String?            // instagram/tiktok/...
  utm       Json?
  createdAt DateTime @default(now())
  
  // Relations
  link      ArtistShareLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
  
  @@index([linkId, createdAt])
  @@map("artist_share_visits")
}

model ArtistShareConversion {
  id            String   @id @default(cuid())
  linkId        String
  orderId       String   @unique
  subtotalMinor Int
  currency      String   @default("EUR")
  createdAt     DateTime @default(now())
  
  // Relations
  link          ArtistShareLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
  
  @@index([linkId, createdAt])
  @@map("artist_share_conversions")
}

// =============================================================================
// Recommendations & Personalization
// =============================================================================

enum InteractionKind {
  VIEW
  FAVORITE
  ADD_TO_CART
  PURCHASE
}

model Interaction {
  id         String           @id @default(cuid())
  userId     String?
  artworkId  String
  kind       InteractionKind
  weight     Int              @default(1)
  createdAt  DateTime         @default(now())
  
  @@index([artworkId, createdAt])
  @@index([userId, createdAt])
  @@map("interactions")
}

model SimilarArtwork {
  // top-N precomputat (nightly)
  artworkId  String
  similarId  String
  score      Float
  createdAt  DateTime         @default(now())
  
  @@id([artworkId, similarId])
  @@index([artworkId, score])
  @@map("similar_artworks")
}

model TrendingDaily {
  // scor zilnic per artwork
  day        DateTime         // YYYY-MM-DD 00:00 UTC
  artworkId  String
  score      Float
  
  @@id([day, artworkId])
  @@index([day, score])
  @@map("trending_daily")
}

model UserPreference {
  // sumar derivat, opțional
  userId     String           @id
  topMediums String[]         // ["painting","photography"]
  priceP50   Int              // mediană (minor)
  updatedAt  DateTime         @updatedAt
  
  @@map("user_preferences")
}

// =============================================================================
// Curator System & Support Tickets
// =============================================================================

enum TicketType {
  GENERAL_INQUIRY
  ARTWORK_QUESTION
  TECHNICAL_SUPPORT
  BILLING_QUESTION
  ARTIST_SUPPORT
  OTHER
}

enum TicketStatus {
  OPEN
  ASSIGNED
  WAITING_CUSTOMER
  WAITING_ARTIST
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TicketSource {
  WEB_FORM
  EMAIL
  PHONE
  CHAT
  API
}



enum PayoutMethod {
  STRIPE_CONNECT
  MANUAL_CSV
}

enum PayoutBatchStatus {
  PENDING
  PROCESSING
  PAID
  PARTIAL
  FAILED
}



model CuratorProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  slug       String   @unique
  displayName String
  avatarUrl   String?
  tagline     String?
  bio         String?
  languages   String[] @default([])     // ex: ["RO","EN"]
  specialties String[] @default([])     // ex: ["painting","photography"]
  socials     Json?
  isPublic    Boolean  @default(true)
  featured    Boolean  @default(false)
  sortIndex   Int      @default(0)
  onlineAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // payouts
  payoutMethod PayoutMethod @default(STRIPE_CONNECT)
  stripeAccountId String?   @unique
  payoutsEnabled   Boolean  @default(false)  // sync din Stripe
  payoutCurrency   String   @default("EUR")

  stats        CuratorStats?
  commissions  CuratorCommission[]  @relation("CuratorCommissions")
  payouts      CuratorPayout[]      @relation("CuratorPayouts")
  tickets      Ticket[]             @relation("CuratorTickets")
  lockedTickets Ticket[]            @relation("CuratorLockedTickets")
  collections  CuratedCollection[]

  @@map("curator_profiles")
}

model CuratorStats {
  id                    String   @id @default(cuid())
  curatorId             String   @unique
  profile               CuratorProfile @relation(fields:[curatorId], references:[id], onDelete: Cascade)
  ticketsClaimed        Int      @default(0)
  ticketsResolved       Int      @default(0)
  avgFirstResponseMin   Float?   // calcul periodic
  commissionMinorEarned Int      @default(0)
  lastUpdated           DateTime @default(now())

  @@map("curator_stats")
}

model Ticket {
  id            String   @id @default(cuid())
  type          TicketType
  status        TicketStatus      @default(OPEN)
  priority      TicketPriority    @default(NORMAL)
  subject       String
  customerId    String?
  artistId      String?
  artworkId     String?
  curatorId     String?           // curatorul care A CLAIM-AT (de lucru)
  curatorLockedToId String?       // dacă userul a ales explicit un curator
  claimLockedUntil DateTime?      // lock window, după care intră în public queue
  source        TicketSource      @default(WEB_FORM)
  payload       Json?
  firstResponseAt DateTime?
  closedAt      DateTime?
  lastActivity  DateTime          @default(now())
  snoozedUntil  DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  customer      User?             @relation("CustomerTickets", fields: [customerId], references: [id], onDelete: SetNull)
  artist        Artist?           @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artwork       Artwork?          @relation(fields: [artworkId], references: [id], onDelete: SetNull)
  curator       CuratorProfile?   @relation("CuratorTickets", fields: [curatorId], references: [id], onDelete: SetNull)
  curatorLockedTo CuratorProfile? @relation("CuratorLockedTickets", fields: [curatorLockedToId], references: [id], onDelete: SetNull)
  messages      Message[]
  commissions   CuratorCommission[]

  @@map("tickets")
}

model Message {
  id        String   @id @default(cuid())
  ticketId  String
  senderId  String
  senderType String  // "CUSTOMER", "ARTIST", "CURATOR", "SYSTEM"
  content   String
  attachments Json?  // array of file URLs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CuratorCommission {
  id             String   @id @default(cuid())
  ticketId       String
  ticket         Ticket   @relation(fields:[ticketId], references:[id], onDelete: Cascade)
  curatorId      String
  curator        CuratorProfile @relation(fields:[curatorId], references:[id], onDelete: Cascade, name: "CuratorCommissions")
  orderId        String
  basisMinor     Int      // baza de calcul (platform fee sau gross)
  pct            Float
  commissionMinor Int
  status         CommissionStatus @default(PENDING) // PENDING | EARNED | PAID | REVERSED
  createdAt      DateTime @default(now())
  earnedAt       DateTime?
  paidAt         DateTime?
  payoutId       String?         // legătura către payout când se plătește
  payout         CuratorPayout?  @relation(fields:[payoutId], references:[id], onDelete: SetNull)

  @@map("curator_commissions")
}

model CuratorPayoutBatch {
  id        String   @id @default(cuid())
  label     String   @unique          // ex: curator-payouts-2025-09
  currency  String
  method    PayoutMethod
  periodFrom DateTime
  periodTo   DateTime
  totalMinor Int      @default(0)
  count      Int      @default(0)
  status     PayoutBatchStatus @default(PENDING)  // PENDING|PROCESSING|PAID|PARTIAL|FAILED
  createdAt  DateTime @default(now())
  processedAt DateTime?
  items     CuratorPayout[]

  @@map("curator_payout_batches")
}

model CuratorPayout {
  id        String   @id @default(cuid())
  batchId   String
  batch     CuratorPayoutBatch @relation(fields:[batchId], references:[id], onDelete: Cascade)
  curatorId String
  curator   CuratorProfile @relation(fields:[curatorId], references:[id], onDelete: Cascade, name: "CuratorPayouts")
  amountMinor Int
  currency  String
  status    PayoutStatus @default(PENDING)   // PENDING|PROCESSING|PAID|FAILED
  reason    String?
  createdAt DateTime @default(now())
  paidAt    DateTime?
  transferId String?   // Stripe transfer id sau ref manual

  commissions CuratorCommission[] // conectate la acest payout

  @@map("curator_payouts")
}

// Reguli simple de preț (fără cupoane): condiție + procent / sumă
model PriceRule {
	id          String   @id @default(cuid())
	name        String
	scope       String   // "GLOBAL" | "MEDIUM" | "ARTWORK" | "EDITION" | "DIGITAL"
	medium      ProductMedium?
	artworkId   String?
	editionId   String?
	pct         Float?   // de ex: -0.10 = -10%
	addMinor    Int?     // ajustare fixă (poate fi negativă)
	priority    Int      @default(100) // 0 = highest
	stackable   Boolean  @default(false)
	startsAt    DateTime?
	endsAt      DateTime?
	active      Boolean  @default(true)
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt

	@@map("price_rules")
}

// Costuri de bază pentru printuri (material/dimensiune)
model PrintBaseCost {
	id              String   @id @default(cuid())
	kind            String   // "CANVAS" | "METAL" | "PHOTO"
	sizeLabel       String   // "30x40", "50x70", etc.
	baseMinor       Int      // cost variabil producție (fără TVA)
	packagingMinor  Int      @default(0)  // cost materiale/ambalare
	leadDays        Int      @default(5)
	active          Boolean  @default(true)
	createdAt       DateTime @default(now())
	updatedAt       DateTime @updatedAt

	@@unique([kind, sizeLabel])
	@@map("print_base_costs")
}

// Profil de pricing per artist (markup & loss-guard)
model ArtistPricingProfile {
	id              String        @id @default(cuid())
	artistId        String        @unique
	printMarkupPct  Float?        // fallback generic pentru toate tipurile de PRINT
	canvasMarkupPct Float?
	metalMarkupPct  Float?
	photoMarkupPct  Float?
	minMarginPct    Float?        // dacă lipsește => PRINT_MIN_MARGIN_PCT
	rounding        PriceRounding @default(END_00)
	active          Boolean       @default(true)
	createdAt       DateTime      @default(now())
	updatedAt       DateTime      @updatedAt

	@@map("artist_pricing_profiles")
}

// Campanii sezoniere programabile
model Campaign {
	id          String   @id @default(cuid())
	name        String
	scope       CampaignScope
	medium      ProductMedium?
	artistId    String?
	artworkId   String?
	editionKind EditionKind?
	pct         Float?            // ex: -0.10 = -10%
	addMinor    Int?              // ajustare fixă (negativ pentru discount)
	priority    Int      @default(50)
	stackable   Boolean  @default(false)
	maxDiscountMinor Int?         // „cap" (opțional)
	startsAt    DateTime
	endsAt      DateTime
	active      Boolean  @default(true)
	ogBadge     Boolean  @default(true)
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt

	@@map("campaigns")
}





enum AnalyticsEventType {
	VIEW_ARTWORK
	SAVE_ARTWORK
	SHARE_ARTWORK
	ADD_TO_CART
	CHECKOUT_START
	PURCHASED
}

// Evenimente de analytics pentru insights
model AnalyticsEvent {
	id         String   @id @default(cuid())
	type       AnalyticsEventType
	ts         DateTime @default(now())
	userId     String?
	sessionId  String?             // client-generated UUID
	artistId   String?
	artworkId  String?
	collectionId String?
	referrer   String?
	utmSource  String?
	utmMedium  String?
	utmCampaign String?
	country    String?             // ISO2
	device     String?             // mobile/desktop
	priceMinor Int?                // snapshot optional
	createdAt  DateTime @default(now())

	@@index([artistId, ts])
	@@index([artworkId, ts])
	@@index([type, ts])
	@@map("analytics_events")
}